#summary Writing agents in the functional programming language F#

Here is some code that shows a skeleton of an agent in F#.

{{{
#light

module TinMan.Samples.FSharp

open TinMan

type GetSmartAgent() =
    let body = new NaoBody()
    let mutable isAlive = true
    interface IAgent with
        member this.Body = body :> IBody
        member this.IsAlive = isAlive
        member this.Think(c,s) =
            // TODO perform thoughtful things
            // Return unit as interface has void return type
            ()

// Create and run an agent
let agent = new GetSmartAgent();
let host = new AgentHost()
host.TeamName <- "Agent86"
host.HostName <- "HQ"
host.Run(agent) |> ignore
}}}

F# sample code is included in the source code.

Other ways of defining an agent type are:

{{{
type GetSmartAgent() =
    inherit AgentBase<NaoBody>(new NaoBody()) with
        override this.Think(c,s) =
            // TODO perform thoughtful things
            ()
    
let body = new NaoBody()
let agent = {
    new AgentBase<NaoBody>(body) with
        override this.Think(c,s) =
            // TODO perform thoughtful things
            ()
}
}}}